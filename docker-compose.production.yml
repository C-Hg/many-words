version: "3"

services:
  client:
    env_file:
    - ../config_many-words.env
    build:
      context: ./client/
      dockerfile: prod.Dockerfile
    container_name: many_words-client
    volumes:
      - client-build:/client/build
    environment:
      BROWSER: "none"
      REACT_APP_GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
    ports:
      - 3000:3000

  server:
    env_file:
    - ../config_many-words.env
    build:
      context: ./server/
      dockerfile: prod.Dockerfile
    container_name: many_words-server
    environment:
      NODE_ENV: "production"
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      SESSION_SECRET: ${SESSION_SECRET}
      MONGODB_USER: ${MONGODB_USER}
      MONGODB_PASSWORD: ${MONGODB_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    volumes:
      - client-build:/server/lib/build
    ports:
      - 3001:3001
      - 9229:9229
    depends_on:
      - mongo

  database-seeder:
    env_file:
    - ../config_many-words.env
    build:
      context: ./tools
    container_name: many_words-database-seeder
    restart: on-failure
    volumes:
      - ./exercises:/exercises
    environment:
      NODE_ENV: "production"
      MONGODB_USER: ${MONGODB_USER}
      MONGODB_PASSWORD: ${MONGODB_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    depends_on:
      - mongo

  mongo:
    env_file:
    - ../config_many-words.env
    image: mongo
    container_name: many_words-mongo
    restart: always
    volumes:
      - /mongo/data:/data/db
      # the db is initialized only if no db is found
      - ./mongodb-init.js:/docker-entrypoint-initdb.d/mongodb-init.js
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}

volumes:
  client-build: