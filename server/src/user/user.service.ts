import { TOTP_EXPIRATION } from "./constants";
import { UserDocument } from "./interfaces/user.interface";
import UserModel from "./models/user.model";

import { User } from "../graphql/exercises.types";
import logger from "../utils/logger";

const userService = {
  /**
   * Create a new user, id is generated by mongo
   */
  createUser: async (user: Partial<User> = {}): Promise<UserDocument> => {
    const newUser = await UserModel.create(user);
    logger.info(`[createUser] created user ${newUser.id}`);
    return newUser;
  },

  /**
   * Get user by id
   */
  getUserById: async (userId: string): Promise<UserDocument> => {
    const user = await UserModel.findById(userId);
    if (!user) {
      throw new Error(`[getUserById] no user found with id ${userId}`);
    }
    return user;
  },

  /**
   * Upserts a user with connexion details to log in with totp
   */
  setTotp: async (email: string, totp: number): Promise<void> => {
    const connexion = {
      totp,
      expiresAt: Date.now() + TOTP_EXPIRATION,
    };
    await UserModel.updateOne(
      { email },
      { connexion },
      {
        upsert: true,
      }
    );
  },
};

export default userService;
