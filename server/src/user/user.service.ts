import { TOTP_EXPIRATION } from "./constants";
import { UserDocument, User } from "./interfaces/user.interface";
import UserModel from "./models/user.model";

import { AuthorizationErrors } from "../authorization/constants";
import { Languages, LoginInput } from "../graphql/types";
import logger from "../utils/logger";

const userService = {
  /**
   * Create a new user, id is generated by mongo
   */
  createUser: async (user: Partial<User> = {}): Promise<UserDocument> => {
    const newUser = await UserModel.create(user);
    logger.info(`[createUser] created user ${newUser.id}`);
    return newUser;
  },

  /**
   * Get user by email
   */
  getUserByEmail: async (email: string): Promise<UserDocument> => {
    const user = await UserModel.findOne({ email });
    if (!user) {
      throw new Error(`[getUserByEmail] no user found with this email`);
    }
    return user;
  },

  /**
   * Get user by id
   */
  getUserById: async (userId: string): Promise<UserDocument | null> => {
    return UserModel.findById(userId);
  },

  resetLoginCredentials: async (userId: string): Promise<void> => {
    await UserModel.findByIdAndUpdate(userId, {
      $unset: { "login.expiresAt": 1, "login.totp": 1 },
    });
  },

  resetVerifyEmailCredentials: async (userId: string): Promise<void> => {
    await UserModel.findByIdAndUpdate(userId, {
      $unset: {
        "verifyEmail.emailToVerify": 1,
        "verifyEmail.expiresAt": 1,
        "verifyEmail.totp": 1,
      },
    });
  },

  /**
   * Sets the preferred language
   */
  setLanguage: async (
    userId: string,
    language: Languages
  ): Promise<UserDocument> => {
    const user = await UserModel.findByIdAndUpdate(
      userId,
      { language },
      { new: true }
    );
    if (!user) {
      throw new Error(`user does not exist`);
    }
    return user;
  },

  /**
   * Updates a user with login details to log in with totp
   */
  setTotpToLogin: async (
    email: string,
    totp: number
  ): Promise<UserDocument | null> => {
    logger.debug(`[setTotp] set new totp`);
    const login = {
      totp,
      expiresAt: Date.now() + TOTP_EXPIRATION,
    };
    return UserModel.findOneAndUpdate(
      { email },
      { login },
      {
        new: true,
      }
    );
  },

  /**
   * Updates a user with login details to log in with totp
   */
  setTotpToVerifyEmail: async (
    emailToVerify: string,
    totp: number,
    userId: string
  ): Promise<void> => {
    logger.debug(`[setTotp] set new totp`);
    const verifyEmail = {
      emailToVerify,
      expiresAt: Date.now() + TOTP_EXPIRATION,
      totp,
    };
    await UserModel.findByIdAndUpdate(userId, { verifyEmail });
  },

  setUserEmail: async (email: string, userId: string): Promise<void> => {
    await UserModel.findByIdAndUpdate(userId, { email });
  },

  /**
   * Verify that the totp provided is valid, to log the user in
   */
  verifyLoginCredentials: (
    loginInput: LoginInput,
    user: UserDocument
  ): AuthorizationErrors | undefined => {
    const { totp } = loginInput;
    const storedTotp = user?.login?.totp;
    if (!storedTotp) {
      return AuthorizationErrors.noTotp;
    }
    if (totp !== user?.login?.totp) {
      return AuthorizationErrors.wrongTotp;
    }
    const expiresAt = user?.login?.expiresAt;
    if (!expiresAt || expiresAt < Date.now()) {
      return AuthorizationErrors.expiredTotp;
    }
    logger.info(
      `[verifyLoginCredentials] successfully verified new user ${user.id}`
    );
  },

  /**
   * Verify that the totp provided is valid, to verify a new email
   */
  verifyEmailWithTotp: (
    verifyEmailInput: LoginInput,
    user: User
  ): AuthorizationErrors | undefined => {
    const { email, totp } = verifyEmailInput;
    const storedTotp = user?.verifyEmail?.totp;
    // email checks
    if (email !== user?.verifyEmail?.emailToVerify) {
      return AuthorizationErrors.wrongEmail;
    }
    if (!storedTotp) {
      // totp checks
      return AuthorizationErrors.noTotp;
    }
    if (totp !== user?.verifyEmail?.totp) {
      return AuthorizationErrors.wrongTotp;
    }
    const expiresAt = user?.verifyEmail?.expiresAt;
    if (!expiresAt || expiresAt < Date.now()) {
      return AuthorizationErrors.expiredTotp;
    }
    logger.info(
      `[verifyLoginCredentials] successfully verified new email for user ${user.id}`
    );
  },
};

export default userService;
