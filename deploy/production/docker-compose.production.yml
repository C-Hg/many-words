version: "3"

services:
  client:
    build:
      context: ./web-app/
      dockerfile: Dockerfile.prod
    container_name: manywords-web-app
    volumes:
      - web-app-build:/web-app/build
    environment:
      BROWSER: "none"
      REACT_APP_GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
    ports:
      - 3000:3000

  server:
    build:
      context: ./server/
      dockerfile: Dockerfile.prod
    container_name: manywords-server
    environment:
      NODE_ENV: "production"
      JWT_SIGNATURE: ${JWT_SIGNATURE}
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
      SERVER_PORT: ${SERVER_PORT}
    volumes:
      - web-app-build:/server/lib/build
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
      - 9229:9229
    depends_on:
      - mongo

  database-seeder:
    build:
      context: ./tools
    container_name: manywords-database-seeder
    restart: on-failure
    volumes:
      - ./exercises:/exercises
    environment:
      NODE_ENV: "production"
      MONGO_USER: $MONGO_USER
      MONGO_PASSWORD: $MONGO_PASSWORD
      MONGO_INITDB_DATABASE: $MONGO_INITDB_DATABASE
      MONGO_URI: mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongo:27017/${MONGO_INITDB_DATABASE}
    depends_on:
      - mongo

  mongo:
    image: mongo
    container_name: manywords-mongo
    restart: always
    volumes:
      - /mongo/data:/data/db
      # the db is initialized only if no db is found
      - ./mongodb-init.js:/docker-entrypoint-initdb.d/mongodb-init.js
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}

volumes:
  client-build: